/*
Copyright 2021 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type MultiClusterChartHandler func(string, *v3.MultiClusterChart) (*v3.MultiClusterChart, error)

type MultiClusterChartController interface {
	generic.ControllerMeta
	MultiClusterChartClient

	OnChange(ctx context.Context, name string, sync MultiClusterChartHandler)
	OnRemove(ctx context.Context, name string, sync MultiClusterChartHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() MultiClusterChartCache
}

type MultiClusterChartClient interface {
	Create(*v3.MultiClusterChart) (*v3.MultiClusterChart, error)
	Update(*v3.MultiClusterChart) (*v3.MultiClusterChart, error)
	UpdateStatus(*v3.MultiClusterChart) (*v3.MultiClusterChart, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v3.MultiClusterChart, error)
	List(namespace string, opts metav1.ListOptions) (*v3.MultiClusterChartList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.MultiClusterChart, err error)
}

type MultiClusterChartCache interface {
	Get(namespace, name string) (*v3.MultiClusterChart, error)
	List(namespace string, selector labels.Selector) ([]*v3.MultiClusterChart, error)

	AddIndexer(indexName string, indexer MultiClusterChartIndexer)
	GetByIndex(indexName, key string) ([]*v3.MultiClusterChart, error)
}

type MultiClusterChartIndexer func(obj *v3.MultiClusterChart) ([]string, error)

type multiClusterChartController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewMultiClusterChartController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) MultiClusterChartController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &multiClusterChartController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromMultiClusterChartHandlerToHandler(sync MultiClusterChartHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v3.MultiClusterChart
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v3.MultiClusterChart))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *multiClusterChartController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v3.MultiClusterChart))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateMultiClusterChartDeepCopyOnChange(client MultiClusterChartClient, obj *v3.MultiClusterChart, handler func(obj *v3.MultiClusterChart) (*v3.MultiClusterChart, error)) (*v3.MultiClusterChart, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *multiClusterChartController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *multiClusterChartController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *multiClusterChartController) OnChange(ctx context.Context, name string, sync MultiClusterChartHandler) {
	c.AddGenericHandler(ctx, name, FromMultiClusterChartHandlerToHandler(sync))
}

func (c *multiClusterChartController) OnRemove(ctx context.Context, name string, sync MultiClusterChartHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromMultiClusterChartHandlerToHandler(sync)))
}

func (c *multiClusterChartController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *multiClusterChartController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *multiClusterChartController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *multiClusterChartController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *multiClusterChartController) Cache() MultiClusterChartCache {
	return &multiClusterChartCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *multiClusterChartController) Create(obj *v3.MultiClusterChart) (*v3.MultiClusterChart, error) {
	result := &v3.MultiClusterChart{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *multiClusterChartController) Update(obj *v3.MultiClusterChart) (*v3.MultiClusterChart, error) {
	result := &v3.MultiClusterChart{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *multiClusterChartController) UpdateStatus(obj *v3.MultiClusterChart) (*v3.MultiClusterChart, error) {
	result := &v3.MultiClusterChart{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *multiClusterChartController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *multiClusterChartController) Get(namespace, name string, options metav1.GetOptions) (*v3.MultiClusterChart, error) {
	result := &v3.MultiClusterChart{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *multiClusterChartController) List(namespace string, opts metav1.ListOptions) (*v3.MultiClusterChartList, error) {
	result := &v3.MultiClusterChartList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *multiClusterChartController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *multiClusterChartController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v3.MultiClusterChart, error) {
	result := &v3.MultiClusterChart{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type multiClusterChartCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *multiClusterChartCache) Get(namespace, name string) (*v3.MultiClusterChart, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v3.MultiClusterChart), nil
}

func (c *multiClusterChartCache) List(namespace string, selector labels.Selector) (ret []*v3.MultiClusterChart, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.MultiClusterChart))
	})

	return ret, err
}

func (c *multiClusterChartCache) AddIndexer(indexName string, indexer MultiClusterChartIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v3.MultiClusterChart))
		},
	}))
}

func (c *multiClusterChartCache) GetByIndex(indexName, key string) (result []*v3.MultiClusterChart, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v3.MultiClusterChart, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v3.MultiClusterChart))
	}
	return result, nil
}

type MultiClusterChartStatusHandler func(obj *v3.MultiClusterChart, status v3.MultiClusterChartStatus) (v3.MultiClusterChartStatus, error)

type MultiClusterChartGeneratingHandler func(obj *v3.MultiClusterChart, status v3.MultiClusterChartStatus) ([]runtime.Object, v3.MultiClusterChartStatus, error)

func RegisterMultiClusterChartStatusHandler(ctx context.Context, controller MultiClusterChartController, condition condition.Cond, name string, handler MultiClusterChartStatusHandler) {
	statusHandler := &multiClusterChartStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromMultiClusterChartHandlerToHandler(statusHandler.sync))
}

func RegisterMultiClusterChartGeneratingHandler(ctx context.Context, controller MultiClusterChartController, apply apply.Apply,
	condition condition.Cond, name string, handler MultiClusterChartGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &multiClusterChartGeneratingHandler{
		MultiClusterChartGeneratingHandler: handler,
		apply:                              apply,
		name:                               name,
		gvk:                                controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterMultiClusterChartStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type multiClusterChartStatusHandler struct {
	client    MultiClusterChartClient
	condition condition.Cond
	handler   MultiClusterChartStatusHandler
}

func (a *multiClusterChartStatusHandler) sync(key string, obj *v3.MultiClusterChart) (*v3.MultiClusterChart, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type multiClusterChartGeneratingHandler struct {
	MultiClusterChartGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *multiClusterChartGeneratingHandler) Remove(key string, obj *v3.MultiClusterChart) (*v3.MultiClusterChart, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.MultiClusterChart{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *multiClusterChartGeneratingHandler) Handle(obj *v3.MultiClusterChart, status v3.MultiClusterChartStatus) (v3.MultiClusterChartStatus, error) {
	objs, newStatus, err := a.MultiClusterChartGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
